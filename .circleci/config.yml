version: 2.1

jobs:
  define-version-no:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - run: mkdir -p ~/project/packages
      - run:
          name: Define version
          command: |
            if [ << pipeline.parameters.tag >> != 'master' ]; then
              export VERSION_NO=`echo << pipeline.parameters.tag >> | cut --complement -c1-7 | sed "s/rc/~rc/"`
            else
              export VERSION_NO=`date +%s`
            fi
            echo "export VERSION_NO=$VERSION_NO" >> packages/version
      - persist_to_workspace:
          root: ~/project/packages
          paths:
              - version
  build-cheerp-compiler:
    docker:
      - image: leaningtech/cheerp_ci_base:20.04
    resource_class: large
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
      - THREADS: "6"
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Clone Cheerp
          command: |
            git clone https://github.com/leaningtech/cheerp-compiler.git
            cd cheerp-compiler
            if [ << pipeline.parameters.tag >> != 'master' ]; then
              git checkout << pipeline.parameters.tag >>
            else
              git checkout << pipeline.parameters.cheerp-compiler-commit >>
            fi
      - run:
          name: Set up environment
          working_directory: ~/project/cheerp-compiler
          command: |
            cat ~/project/packages/version >> $BASH_ENV
      - build-internal:
          directory: cheerp-compiler
          package-name: llvm-clang
      - persist_to_workspace:
          root: ~/project/packages
          paths:
            - cheerp-llvm-clang_*.deb
  build-libraries:
    docker:
      - image: leaningtech/cheerp_ci_base:20.04
    resource_class: medium
    environment:
      - NINJA_STATUS: "[%u/%r/%f] "
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Get repos
          command: |
            git clone https://github.com/leaningtech/cheerp-compiler.git
            git clone https://github.com/leaningtech/cheerp-utils.git
            git clone https://github.com/leaningtech/cheerp-libs.git
            git clone https://github.com/leaningtech/cheerp-newlib.git
            if [ << pipeline.parameters.tag >> != master ]; then
              cd cheerp-compiler && git checkout << pipeline.parameters.tag >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.tag >> && cd ..
              cd cheerp-libs && git checkout << pipeline.parameters.tag >> && cd ..
              cd cheerp-newlib && git checkout << pipeline.parameters.tag >>
            else
              cd cheerp-compiler && git checkout << pipeline.parameters.cheerp-compiler-commit >> && cd ..
              cd cheerp-utils && git checkout << pipeline.parameters.cheerp-utils-commit >> && cd ..
              cd cheerp-libs && git checkout << pipeline.parameters.cheerp-libs-commit >> && cd ..
              cd cheerp-newlib && git checkout << pipeline.parameters.cheerp-newlib-commit >>
            fi
      - run:
          name: Set up workspace
          command: |
            cat ~/project/packages/version >> $BASH_ENV
            mkdir /opt/cheerp/
      - install-deb:
          package-name: llvm-clang
      - create-deb:
          directory: cheerp-utils
          package-name: utils
      - run:
          name: Set up for newlib
          working_directory: ~/project
          command: |
            cp -rv cheerp-compiler/libcxx cheerp-newlib
      - create-deb:
          directory: cheerp-newlib
          package-name: newlib
      - run:
          name: Set up for libcxx
          working_directory: ~/project/cheerp-compiler
          command: |
            rm -rf debian/
            cp -rv libcxx/debian/ debian/
      - create-deb:
          directory: cheerp-compiler
          package-name: libcxx
      - run:
          name: Set up for libcxxabi
          working_directory: ~/project/cheerp-compiler
          command: |
            rm -rf build_genericjs/
            rm -rf build_asmjs/
            rm -rf debian/
            cp -rv libcxxabi/debian/ debian/
      - create-deb:
          directory: cheerp-compiler
          package-name: libcxxabi
      - build-internal:
          directory: cheerp-libs
          package-name: libs
      - persist_to_workspace:
          root: packages
          paths:
            - cheerp-*.deb
  test:
    docker:
      - image: leaningtech/cheerp_ci_base:20.04
    resource_class: large
    steps:
      - attach_workspace:
          at: packages
      - run:
          name: Get tests
          command: |
            git clone https://github.com/leaningtech/cheerp-utils.git
            cd cheerp-utils
            if [ << pipeline.parameters.tag >> != master ]; then
              git checkout << pipeline.parameters.tag >>
            else
              git checkout << pipeline.parameters.cheerp-utils-commit >>
            fi
      - run: mkdir -p /opt/cheerp
      - install-deb:
          package-name: llvm-clang
      - install-deb:
          package-name: utils
      - install-deb:
          package-name: newlib
      - install-deb:
          package-name: libcxx
      - install-deb:
          package-name: libcxxabi
      - install-deb:
          package-name: libs
      - run:
          name: test
          working_directory: ~/project/cheerp-utils/tests
          command: ./run_tests.py --all --determinism=3 --determinism-probability=0.2 "/opt/cheerp/bin/clang++" "node --experimental-wasm-reftypes" -j4
          no_output_timeout: 30m
      - store_artifacts:
          path: ~/project/packages

commands:
  create-deb:
    parameters:
      directory:
        type: string
      package-name:
        type: string
    steps:
      - build-internal:
          directory: << parameters.directory >>
          package-name: << parameters.package-name >>
      - install-deb:
          package-name: << parameters.package-name >>
  build-internal:
    parameters:
      directory:
        type: string
      package-name:
        type: string
    steps:
      - run:
          name: Build cheerp-<< parameters.package-name >>
          working_directory: ~/project/<< parameters.directory >>
          command: |
            dch -b -v ${VERSION_NO}-1 "Internal build" -m
            dpkg-buildpackage -d -b
            mv ../cheerp-<< parameters.package-name >>_*.deb ../packages/
  install-deb:
    parameters:
      package-name:
        type: string
    steps:
     - run:
          name: Set up cheerp-<< parameters.package-name >>
          working_directory: ~/project/packages
          command: |
            mkdir tmp
            dpkg -x cheerp-<< parameters.package-name >>_*.deb tmp
            cp -rv tmp/opt/cheerp/* /opt/cheerp
            rm -rf tmp

parameters:
  tag:
    type: string
    default: "master"
  cheerp-compiler-commit:
    type: string
    default: << pipeline.git.revision >>
  cheerp-utils-commit:
    type: string
    default: "master"
  cheerp-newlib-commit:
    type: string
    default: "master"
  cheerp-libs-commit:
    type: string
    default: "master"

workflows:
  build-cheerp-compiler:
    jobs:
      - define-version-no
      - build-cheerp-compiler:
          requires:
            - define-version-no
      - build-libraries:
          requires:
            - define-version-no
            - build-cheerp-compiler
      - test:
          requires:
            - build-cheerp-compiler
            - build-libraries
